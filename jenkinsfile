properties([parameters([choice(choices: ['Patch','Minor','Major'], description: 'Third stage meassage', name: 'ImageTag' )])])
pipeline{
  agent any
   environment {
    DOCKERHUB_CREDENTIALS=credentials('dockerhub')
    def new_version = ''
    def version = ''
  }
  stages{
        stage('Pull version'){
            steps{
              script{
       	 version = readFile('VERSION')
                     echo "${version}"

                     if("${ImageTag}"=="Patch"){
                      echo "This is patch version"
		      def versions = version.split('\\.')
		      def last = versions[2]
		      last = last.toInteger() + 1;
		      new_version = versions[0] + '.' + versions[1]+'.'+"$last"
		      echo "$new_version"
		     
		      
                     }else if("${ImageTag}"=="Minor"){
		      def versions = version.split('\\.')
		      def mid = versions[1]
		      mid = mid.toInteger() + 1;
		      new_version = versions[0] + '.' + "$mid"+'.'+0
		      echo "$new_version"
		      

                      echo "This is minor version"
                     }else{
                      echo "This is major version"
		      def versions = version.split('\\.')
		      def first = versions[0]
		      first = first.toInteger() + 1;
		      new_version = "$first" + '.' + 0 +'.' + 0
		      echo "$new_version"
		      
		      
                     }
                }    
  
           }
        }
	
	
	stage('Build') {

			steps {
				script{
					
					sh "docker build . -t nadeem90/test-imagetage:$new_version"

					 }	
              	}
			}


			
			
	stage('Docker Login, Docker Push') {

			steps {
				script{
				docker.withRegistry('', 'dockerhub') {
						
					sh "docker push nadeem90/test-imagetage:'$new_version'"	
				      }	
              	}
			}
		}
		
		
	stage('Update GIT') {
	   steps{
            script {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    withCredentials([usernamePassword(credentialsId: 'github', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        //def encodedPassword = URLEncoder.encode("$GIT_PASSWORD",'UTF-8')
                        sh "git config user.email nadeemmalik9800@gmail.com"
                        sh "git config user.name NadeemRais"
                        sh "cat VERSION"
                        sh "sed -r -i s/'${version}'/'${new_version}'/g VERSION"
                        sh "cat VERSION"
                        sh "git add ."
                        sh "git commit -m 'Done by Jenkins Job changemanifest: ${env.BUILD_NUMBER}'"
                        sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/node-app-test.git HEAD:main"
						
						
      				}
    			}
  			}
		}

	}		
	
	
	
	
	
     }
  } 
