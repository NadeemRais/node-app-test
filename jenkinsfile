properties([parameters([choice(choices: ['Patch','Minor','Major'], description: 'Third stage meassage', name: 'ImageTag' )])])
pipeline{
  agent any
   environment {
    DOCKERHUB_CREDENTIALS=credentials('dockerhub')
    def new_version = ''
    def version = ''
    def applicaton = 'backend'
    def app_ver = ''
    def new_app_ver = ''
  }
  stages{
        stage('Pull version'){
            steps{
              script{
		sh "curl -X GET -u admin:nexus http://192.168.3.37:8081/repository/my-repo/VERSION -O"

		//sh "rm file && rm final_version"
		
		sh "grep '${applicaton}' VERSION >> file && grep -Eo '[0-9]+(.[0-9]+)*' file >> final_version"
		
		
		version = readFile('final_version').trim()
		
		app_ver = readFile('file').trim()		
			
                     echo "${version}"
		    echo "${app_ver}" 
		    echo "$new_app_ver"

                     if("${ImageTag}"=="Patch"){
                      echo "This is patch version"
		      def versions = version.split('\\.')
		      def last = versions[2]
		      last = last.toInteger() + 1;
		      new_version = versions[0] + '.' + versions[1]+'.'+"$last"
		      
		      //def app_vers = app_ver.split('\\.')
		      //def app_last = app_vers[2]
		      //app_last = app_last.toInteger() + 1;
		      //new_app_ver = app_vers[0] + '.' + app_vers[1]+'.'+"$app_last"
		      
		      sh "rm file && rm final_version"
		      
	

		     
		      
                     }else if("${ImageTag}"=="Minor"){
		      def versions = version.split('\\.')
		      def mid = versions[1]
		      mid = mid.toInteger() + 1;
		      new_version = versions[0] + '.' + "$mid"+'.'+0
		      echo "$new_version"
		      
		      
		      //def app_vers = app_ver.split('\\.')
		      //def app_mid = app_vers[1]
		      //app_mid = app_mid.toInteger() + 1;
		      //new_app_ver = app_vers[0] + '.' + "$app_mid"+'.'+0
		      
		      sh "rm file && rm final_version"
		      
		     

                     
                     }else{
                      echo "This is major version"
		      def versions = version.split('\\.')
		      def first = versions[0]
		      first = first.toInteger() + 1;
		      new_version = "$first" + '.' + 0 +'.' + 0
		      echo "$new_version"
		      
		      //def app_vers = app_ver.split('\\.')
		      //def temp = app_vers[0]
		      //def temp1 = temp.split('\\=')
		      //def temp2 = temp1[1]
		      //temp2 = temp2.toInteger() + 1;
		      //def temp3 = temp1[0] +'='+ "$temp2"
		      //new_app_ver = "$temp3" + '.' +0+'.'+0
		      sh "rm file && rm final_version"
		          
		      
                     }
                }    
  
           }
        }
	
	
	stage('Build') {

			steps {
				script{
					
					sh "docker build . -t nadeem90/test-imagetage:$new_version"

					 }	
              	}
			}


			
			
	//stage('Docker Login, Docker Push') {

			//steps {
				//script{
				//docker.withRegistry('', 'dockerhub') {
						
					//sh "docker push nadeem90/test-imagetage:'$new_version'"	
				      //}	
              	//}
			//}
		//}
		

         stage('Update Nexus') {
	   	steps{
            	     script {	
			
			new_app_ver = '${applicaton}'+'='+'${new_version}'
            		sh "sed -i 's/${app_ver}/${new_app_ver}/g' VERSION" 

    			//sh "curl -v -u admin:nexus --upload-file VERSION http://192.168.3.37:8081/repository/my-repo/"
            			}
            		}
        	}    			
	
	
	
	
	
     }
  } 
